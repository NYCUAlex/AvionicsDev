
LoRa_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003828  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ec  080039ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6b0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002317  00000000  00000000  0002e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00030a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00031740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239c0  00000000  00000000  00032360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f41e  00000000  00000000  00055d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d722d  00000000  00000000  0006513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c36b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003638  00000000  00000000  0013c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080039bc 	.word	0x080039bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080039bc 	.word	0x080039bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	4613      	mov	r3, r2
 80004fe:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6858      	ldr	r0, [r3, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	891b      	ldrh	r3, [r3, #8]
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	f001 fa56 	bl	80019bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	6818      	ldr	r0, [r3, #0]
 8000514:	88fa      	ldrh	r2, [r7, #6]
 8000516:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800051a:	68b9      	ldr	r1, [r7, #8]
 800051c:	f001 ffc7 	bl	80024ae <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8000520:	bf00      	nop
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fcba 	bl	8002ea0 <HAL_SPI_GetState>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d1f7      	bne.n	8000522 <LoRa_readReg+0x32>
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	8b3a      	ldrh	r2, [r7, #24]
 8000538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	f002 f8f2 	bl	8002726 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8000542:	bf00      	nop
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fca9 	bl	8002ea0 <HAL_SPI_GetState>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d1f7      	bne.n	8000544 <LoRa_readReg+0x54>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	891b      	ldrh	r3, [r3, #8]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 fa2c 	bl	80019bc <HAL_GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	4613      	mov	r3, r2
 800057a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6858      	ldr	r0, [r3, #4]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	891b      	ldrh	r3, [r3, #8]
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	f001 fa18 	bl	80019bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	f001 ff89 	bl	80024ae <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 800059c:	bf00      	nop
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fc7c 	bl	8002ea0 <HAL_SPI_GetState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f7      	bne.n	800059e <LoRa_writeReg+0x32>
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	8b3a      	ldrh	r2, [r7, #24]
 80005b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b8:	6839      	ldr	r1, [r7, #0]
 80005ba:	f001 ff78 	bl	80024ae <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 80005be:	bf00      	nop
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fc6b 	bl	8002ea0 <HAL_SPI_GetState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1f7      	bne.n	80005c0 <LoRa_writeReg+0x54>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	891b      	ldrh	r3, [r3, #8]
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 f9ee 	bl	80019bc <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LoRa_read_single>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read_single(LoRa* _LoRa, uint8_t address){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80005fe:	f107 030f 	add.w	r3, r7, #15
 8000602:	f107 010e 	add.w	r1, r7, #14
 8000606:	2201      	movs	r2, #1
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	2201      	movs	r2, #1
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff6f 	bl	80004f0 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_write_single>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_single(LoRa* _LoRa, uint8_t address, uint8_t value){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
 8000628:	4613      	mov	r3, r2
 800062a:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80; // address 8 bits + 1000 0000
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000636:	78bb      	ldrb	r3, [r7, #2]
 8000638:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	f107 010e 	add.w	r1, r7, #14
 8000642:	2201      	movs	r2, #1
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	2201      	movs	r2, #1
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff8f 	bl	800056c <LoRa_writeReg>
	//HAL_Delay(5);
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000656:	b590      	push	{r4, r7, lr}
 8000658:	b089      	sub	sp, #36	; 0x24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	4613      	mov	r3, r2
 8000662:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 10;
 8000664:	230a      	movs	r3, #10
 8000666:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e007      	b.n	800067e <LoRa_receive+0x28>
		data[i]=0;
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3301      	adds	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf3      	blt.n	800066e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STANDBY_MODE);
 8000686:	2101      	movs	r1, #1
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f844 	bl	8000716 <LoRa_gotoMode>
	read = LoRa_read_single(_LoRa, SX127x_LoRa_IrqFlags);
 800068e:	2112      	movs	r1, #18
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ffa9 	bl	80005e8 <LoRa_read_single>
 8000696:	4603      	mov	r3, r0
 8000698:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800069a:	7cfb      	ldrb	r3, [r7, #19]
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d02f      	beq.n	8000704 <LoRa_receive+0xae>
		LoRa_write_single(_LoRa, SX127x_LoRa_IrqFlags, 0xFF);
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	2112      	movs	r1, #18
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff ffb7 	bl	800061c <LoRa_write_single>
		number_of_bytes = LoRa_read_single(_LoRa, SX127x_LoRa_RxNbBytes);
 80006ae:	2113      	movs	r1, #19
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff ff99 	bl	80005e8 <LoRa_read_single>
 80006b6:	4603      	mov	r3, r0
 80006b8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read_single(_LoRa, SX127x_LoRa_FifoRxCurrentAddr);
 80006ba:	2110      	movs	r1, #16
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff ff93 	bl	80005e8 <LoRa_read_single>
 80006c2:	4603      	mov	r3, r0
 80006c4:	74fb      	strb	r3, [r7, #19]
		LoRa_write_single(_LoRa, SX127x_LoRa_FifoAddrPtr, read);
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	461a      	mov	r2, r3
 80006ca:	210d      	movs	r1, #13
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff ffa5 	bl	800061c <LoRa_write_single>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80006d2:	7cba      	ldrb	r2, [r7, #18]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	bf28      	it	cs
 80006da:	4613      	movcs	r3, r2
 80006dc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e00b      	b.n	80006fc <LoRa_receive+0xa6>
			data[i] = LoRa_read_single(_LoRa, SX127x_Fifo);
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	18d4      	adds	r4, r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff ff7b 	bl	80005e8 <LoRa_read_single>
 80006f2:	4603      	mov	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbef      	blt.n	80006e4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000704:	2105      	movs	r1, #5
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 f805 	bl	8000716 <LoRa_gotoMode>
    return min;
 800070c:	7ffb      	ldrb	r3, [r7, #31]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}

08000716 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, uint8_t mode){
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read_single(_LoRa, SX127x_OpMode);
 8000722:	2101      	movs	r1, #1
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff5f 	bl	80005e8 <LoRa_read_single>
 800072a:	4603      	mov	r3, r0
 800072c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <LoRa_gotoMode+0x34>
		data = (read & 0xF8) | SLEEP_MODE;        //(x&0xF8): remain first 5 bits state, (x|0x00): change last 3 bits state
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	f023 0307 	bic.w	r3, r3, #7
 800073e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000748:	e042      	b.n	80007d0 <LoRa_gotoMode+0xba>
	}else if (mode == STANDBY_MODE){
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10d      	bne.n	800076c <LoRa_gotoMode+0x56>
		data = (read & 0xF8) | STANDBY_MODE;
 8000750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000754:	f023 0307 	bic.w	r3, r3, #7
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	b25b      	sxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STANDBY_MODE;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800076a:	e031      	b.n	80007d0 <LoRa_gotoMode+0xba>
	}else if (mode == TRANSMIT_MODE){
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d10d      	bne.n	800078e <LoRa_gotoMode+0x78>
		data = (read & 0xF8) | TRANSMIT_MODE;
 8000772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000776:	f023 0307 	bic.w	r3, r3, #7
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f043 0303 	orr.w	r3, r3, #3
 8000780:	b25b      	sxtb	r3, r3
 8000782:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2203      	movs	r2, #3
 8000788:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800078c:	e020      	b.n	80007d0 <LoRa_gotoMode+0xba>
	}else if (mode == RXCONTIN_MODE){
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d10d      	bne.n	80007b0 <LoRa_gotoMode+0x9a>
		data = (read & 0xF8) | RXCONTIN_MODE;
 8000794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000798:	f023 0307 	bic.w	r3, r3, #7
 800079c:	b25b      	sxtb	r3, r3
 800079e:	f043 0305 	orr.w	r3, r3, #5
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2205      	movs	r2, #5
 80007aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80007ae:	e00f      	b.n	80007d0 <LoRa_gotoMode+0xba>
	}else if (mode == RXSINGLE_MODE){
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d10c      	bne.n	80007d0 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | RXSINGLE_MODE;
 80007b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007ba:	f023 0307 	bic.w	r3, r3, #7
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	f043 0306 	orr.w	r3, r3, #6
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2206      	movs	r2, #6
 80007cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	LoRa_write_single(_LoRa, SX127x_OpMode, data);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	461a      	mov	r2, r3
 80007d4:	2101      	movs	r1, #1
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff20 	bl	800061c <LoRa_write_single>
//	HAL_Delay(10);
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	LoRa_reset(_LoRa);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f8e1 	bl	80009b4 <LoRa_reset>

	while(LoRa_isvalid(_LoRa)!=1);               //wait until LoRa available
 80007f2:	bf00      	nop
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f995 	bl	8000b24 <LoRa_isvalid>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d1f9      	bne.n	80007f4 <LoRa_init+0x10>
	// goto sleep mode:
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff87 	bl	8000716 <LoRa_gotoMode>
	HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fdd3 	bl	80013b4 <HAL_Delay>

	SX127x_set_Tcxo(_LoRa, _LoRa->TCXOon);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f94c 	bl	8000ab4 <SX127x_set_Tcxo>

	// turn into LoRa modem/Low frequency mode:
	read = LoRa_read_single(_LoRa, SX127x_OpMode);      //read current state of operation mode
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee2 	bl	80005e8 <LoRa_read_single>
 8000824:	4603      	mov	r3, r0
 8000826:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fdc3 	bl	80013b4 <HAL_Delay>
	uint8_t LowFreqModeOn = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
	if(_LoRa->frequency<500){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800083a:	d201      	bcs.n	8000840 <LoRa_init+0x5c>
		LowFreqModeOn = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
	}
	data = read | (_LoRa->LoRa_modem << 7) | (LowFreqModeOn<<3);             //needed operation mode register value
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	b25a      	sxtb	r2, r3
 800084a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800084e:	4313      	orrs	r3, r2
 8000850:	b25a      	sxtb	r2, r3
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_OpMode, data);
 800085e:	7b7b      	ldrb	r3, [r7, #13]
 8000860:	461a      	mov	r2, r3
 8000862:	2101      	movs	r1, #1
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fed9 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 800086a:	200a      	movs	r0, #10
 800086c:	f000 fda2 	bl	80013b4 <HAL_Delay>

	// set frequency:
	LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f8ba 	bl	80009f0 <LoRa_setFrequency>

	// set bandwidth, coding rate and expilicit mode:
	data = (_LoRa->bandWidth << 4) | (_LoRa->crcRate << 1) | (_LoRa->implicit_on << 0);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	b25a      	sxtb	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b25a      	sxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig, data);
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	461a      	mov	r2, r3
 80008a6:	211d      	movs	r1, #29
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff feb7 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fd80 	bl	80013b4 <HAL_Delay>

	// set spreading factor, CRC on, and Timeout Msb:
//	LoRa_setTOMsb_setCRCon(_LoRa);
	LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80008ba:	4619      	mov	r1, r3
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f8c7 	bl	8000a50 <LoRa_setSpreadingFactor>
	//enable CRC
	LoRa_set_CRCon(_LoRa, _LoRa->CRCon);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f905 	bl	8000ada <LoRa_set_CRCon>

	// set preamble:
	LoRa_write_single(_LoRa, SX127x_LoRa_PreambleMsb, _LoRa->preamble >> 8);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	2120      	movs	r1, #32
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fe9c 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f000 fd65 	bl	80013b4 <HAL_Delay>
	LoRa_write_single(_LoRa, SX127x_LoRa_PreambleLsb, _LoRa->preamble >> 0);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	2121      	movs	r1, #33	; 0x21
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe91 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 fd5a 	bl	80013b4 <HAL_Delay>

	// set output power gain:
	data = (_LoRa->paselect << 7) | (_LoRa->maxpower << 4) | (_LoRa->outputpower << 0);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000906:	01db      	lsls	r3, r3, #7
 8000908:	b25a      	sxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	b25b      	sxtb	r3, r3
 8000914:	4313      	orrs	r3, r2
 8000916:	b25a      	sxtb	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_PaConfig, data);
 8000926:	7b7b      	ldrb	r3, [r7, #13]
 8000928:	461a      	mov	r2, r3
 800092a:	2109      	movs	r1, #9
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe75 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f000 fd3e 	bl	80013b4 <HAL_Delay>

    //20dBm output
	LoRa_write_single(_LoRa, SX127x_PaDac, _LoRa->PaDac);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800093e:	461a      	mov	r2, r3
 8000940:	214d      	movs	r1, #77	; 0x4d
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe6a 	bl	800061c <LoRa_write_single>

	//set OCP current protect
	data = (0x01 << 5) | (_LoRa->PaOcp);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800094e:	f043 0320 	orr.w	r3, r3, #32
 8000952:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_Ocp, data);
 8000954:	7b7b      	ldrb	r3, [r7, #13]
 8000956:	461a      	mov	r2, r3
 8000958:	210b      	movs	r1, #11
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fe5e 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fd27 	bl	80013b4 <HAL_Delay>

	//normal I&Q
//	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ, 0x26);
//	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ2, 0x1d);
	//invert I&Q
	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ, 0x67);
 8000966:	2267      	movs	r2, #103	; 0x67
 8000968:	2133      	movs	r1, #51	; 0x33
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fe56 	bl	800061c <LoRa_write_single>
	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ2, 0x19);
 8000970:	2219      	movs	r2, #25
 8000972:	213b      	movs	r1, #59	; 0x3b
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fe51 	bl	800061c <LoRa_write_single>
	HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f000 fd1a 	bl	80013b4 <HAL_Delay>

//		// set Timeout Lsb:
//			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);

	// set base addresses
	LoRa_write_single(_LoRa, SX127x_LoRa_FifoRxBaseAddr, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	210f      	movs	r1, #15
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fe49 	bl	800061c <LoRa_write_single>
	LoRa_write_single(_LoRa, SX127x_LoRa_FifoTxBaseAddr, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210e      	movs	r1, #14
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fe44 	bl	800061c <LoRa_write_single>
//			read = LoRa_read(_LoRa, RegDioMapping1);
//			data = read | 0x3F;
//			LoRa_write(_LoRa, RegDioMapping1, data);
//
	// goto standby mode:
	LoRa_gotoMode(_LoRa, STANDBY_MODE);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff febd 	bl	8000716 <LoRa_gotoMode>
	_LoRa->current_mode = STANDBY_MODE;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	HAL_Delay(10);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f000 fd05 	bl	80013b4 <HAL_Delay>

	return LORA_OK;
 80009aa:	23c8      	movs	r3, #200	; 0xc8
//			read = LoRa_read(_LoRa, RegVersion);
//			if(read == 0x12)
//				return LORA_OK;
//			else
//				return LORA_NOT_FOUND;
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68d8      	ldr	r0, [r3, #12]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8a1b      	ldrh	r3, [r3, #16]
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	f000 fff8 	bl	80019bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fcf1 	bl	80013b4 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68d8      	ldr	r0, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	8a1b      	ldrh	r3, [r3, #16]
 80009da:	2201      	movs	r2, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	f000 ffed 	bl	80019bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f000 fce6 	bl	80013b4 <HAL_Delay>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, uint16_t freq){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
	uint8_t  data;
	uint32_t Frf;
	Frf = (freq * 524288) / 32;       //Frf = fRF*(2^19)/F(XOSC), 2^19 = 524288, F(XOSC) usually = 32MHz, Frf = 0xABCDEF
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	60fb      	str	r3, [r7, #12]

	// write Msb(0xAB):
	data = Frf >> 16;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrMsb, data);
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2106      	movs	r1, #6
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fe04 	bl	800061c <LoRa_write_single>
	HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fccd 	bl	80013b4 <HAL_Delay>

	// write Mid(0xCD):
	data = Frf >> 8;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrMid, data);
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	461a      	mov	r2, r3
 8000a24:	2107      	movs	r1, #7
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fdf8 	bl	800061c <LoRa_write_single>
	HAL_Delay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fcc1 	bl	80013b4 <HAL_Delay>

	// write Lsb(0xEF):
	data = Frf >> 0;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrLsb, data);
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fded 	bl	800061c <LoRa_write_single>
	HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fcb6 	bl	80013b4 <HAL_Delay>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, uint8_t SF){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	if (SF < 6) {
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d802      	bhi.n	8000a68 <LoRa_setSpreadingFactor+0x18>
		SF = 6;
 8000a62:	2306      	movs	r3, #6
 8000a64:	70fb      	strb	r3, [r7, #3]
 8000a66:	e004      	b.n	8000a72 <LoRa_setSpreadingFactor+0x22>
	} else if (SF > 12) {
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b0c      	cmp	r3, #12
 8000a6c:	d901      	bls.n	8000a72 <LoRa_setSpreadingFactor+0x22>
		SF = 12;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	70fb      	strb	r3, [r7, #3]
//	} else {
//		LoRa_write_single(_LoRa, SX127x_LoRa_DetectOptimize, 0xc3);
//		LoRa_write_single(_LoRa, SX127x_LoRa_DetectionThreshold, 0x0a);
//	}

	read = LoRa_read_single(_LoRa, SX127x_LoRa_ModemConfig2);
 8000a72:	211e      	movs	r1, #30
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fdb7 	bl	80005e8 <LoRa_read_single>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fc98 	bl	80013b4 <HAL_Delay>

	data = (SF << 4) | (read & 0x0F);
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	73bb      	strb	r3, [r7, #14]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig2, data);
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	211e      	movs	r1, #30
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fdbb 	bl	800061c <LoRa_write_single>
	HAL_Delay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fc84 	bl	80013b4 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SX127x_set_Tcxo>:
			bool on --> LoRa object handler

		returns     : void
\* ----------------------------------------------------------------------------- */
void SX127x_set_Tcxo(LoRa* _LoRa, bool on)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
    uint8_t	data;
    data = on << 4;
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	73fb      	strb	r3, [r7, #15]
    LoRa_write_single(_LoRa, SX127x_Tcxo, data);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	214b      	movs	r1, #75	; 0x4b
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fda5 	bl	800061c <LoRa_write_single>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <LoRa_set_CRCon>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
void LoRa_set_CRCon(LoRa* _LoRa, uint8_t CRCvalue){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;
	read = LoRa_read_single(_LoRa, SX127x_LoRa_ModemConfig2);
 8000ae6:	211e      	movs	r1, #30
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fd7d 	bl	80005e8 <LoRa_read_single>
 8000aee:	4603      	mov	r3, r0
 8000af0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fc5e 	bl	80013b4 <HAL_Delay>

	data = (CRCvalue << 2) | (read | 0x04);
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	73bb      	strb	r3, [r7, #14]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig2, data);
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	211e      	movs	r1, #30
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fd83 	bl	800061c <LoRa_write_single>
	HAL_Delay(1);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fc4c 	bl	80013b4 <HAL_Delay>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	return 1;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b64      	ldr	r3, [pc, #400]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a63      	ldr	r2, [pc, #396]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b61      	ldr	r3, [pc, #388]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b5d      	ldr	r3, [pc, #372]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a5c      	ldr	r2, [pc, #368]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a55      	ldr	r2, [pc, #340]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a4e      	ldr	r2, [pc, #312]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a39      	ldr	r2, [pc, #228]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_GPIO_Init+0x1ac>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2110      	movs	r1, #16
 8000c1a:	4834      	ldr	r0, [pc, #208]	; (8000cec <MX_GPIO_Init+0x1b0>)
 8000c1c:	f000 fece 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FEM_CTX_Pin|FEM_CPS_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000c26:	4832      	ldr	r0, [pc, #200]	; (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c28:	f000 fec8 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c34:	f000 fec2 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0x1b8>)
 8000c3e:	f000 febd 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8000c42:	2310      	movs	r3, #16
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4824      	ldr	r0, [pc, #144]	; (8000cec <MX_GPIO_Init+0x1b0>)
 8000c5a:	f000 fd03 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO0_Pin;
 8000c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c76:	f000 fcf5 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FEM_CTX_Pin|LoRa_RST_Pin|FEM_CPS_Pin;
 8000c7a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c94:	f000 fce6 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8000c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000cb0:	f000 fcd8 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <MX_GPIO_Init+0x1b8>)
 8000ccc:	f000 fcca 	bl	8001664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f000 fc6c 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cda:	2028      	movs	r0, #40	; 0x28
 8000cdc:	f000 fc85 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40021400 	.word	0x40021400

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a2      	sub	sp, #136	; 0x88
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d02:	f000 fae5 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d06:	f000 f8b9 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0a:	f7ff ff17 	bl	8000b3c <MX_GPIO_Init>
  MX_SPI4_Init();
 8000d0e:	f000 f937 	bl	8000f80 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000d12:	f000 fa3f 	bl	8001194 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  myLoRa.hSPIx = &hspi4;
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <main+0x158>)
 8000d18:	4a4f      	ldr	r2, [pc, #316]	; (8000e58 <main+0x15c>)
 8000d1a:	601a      	str	r2, [r3, #0]
  myLoRa.CS_port = SPI4_CS_GPIO_Port;
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <main+0x158>)
 8000d1e:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <main+0x160>)
 8000d20:	605a      	str	r2, [r3, #4]
  myLoRa.CS_pin = SPI4_CS_Pin;
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <main+0x158>)
 8000d24:	2210      	movs	r2, #16
 8000d26:	811a      	strh	r2, [r3, #8]
  myLoRa.reset_port = LoRa_RST_GPIO_Port;
 8000d28:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <main+0x158>)
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	; (8000e60 <main+0x164>)
 8000d2c:	60da      	str	r2, [r3, #12]
  myLoRa.reset_pin = LoRa_RST_Pin;
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <main+0x158>)
 8000d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d34:	821a      	strh	r2, [r3, #16]
  myLoRa.DIO0_port = DIO0_GPIO_Port;
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <main+0x158>)
 8000d38:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <main+0x168>)
 8000d3a:	615a      	str	r2, [r3, #20]
  myLoRa.DIO0_pin = DIO0_Pin;
 8000d3c:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <main+0x158>)
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	831a      	strh	r2, [r3, #24]
  myLoRa.DIO1_port = DIO1_GPIO_Port;
 8000d44:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <main+0x158>)
 8000d46:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <main+0x164>)
 8000d48:	61da      	str	r2, [r3, #28]
  myLoRa.DIO1_pin = DIO1_Pin;
 8000d4a:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <main+0x158>)
 8000d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d50:	841a      	strh	r2, [r3, #32]
  myLoRa.DIO2_port = DIO2_GPIO_Port;
 8000d52:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <main+0x158>)
 8000d54:	4a43      	ldr	r2, [pc, #268]	; (8000e64 <main+0x168>)
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  myLoRa.DIO2_pin = DIO2_Pin;
 8000d58:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <main+0x158>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5e:	851a      	strh	r2, [r3, #40]	; 0x28
  myLoRa.LoRa_modem = LORA_MODEM;
 8000d60:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <main+0x158>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.frequency = 425;           //MHz
 8000d68:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <main+0x158>)
 8000d6a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8000d6e:	859a      	strh	r2, [r3, #44]	; 0x2c
  myLoRa.bandWidth = BW_125KHz;
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <main+0x158>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  myLoRa.crcRate = CR_4_5;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <main+0x158>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  myLoRa.implicit_on = EXPLICIT;
 8000d80:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <main+0x158>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  myLoRa.CRCon = 0;
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <main+0x158>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  myLoRa.spredingFactor = SF_7;
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <main+0x158>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  myLoRa.preamble = 10;
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <main+0x158>)
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	865a      	strh	r2, [r3, #50]	; 0x32
  myLoRa.paselect = RFO;
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <main+0x158>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  myLoRa.maxpower = 7;
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <main+0x158>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  myLoRa.outputpower = 10;                //0~15
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <main+0x158>)
 8000db0:	220a      	movs	r2, #10
 8000db2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//  myLoRa.paselect = PA_BOOST;
//  myLoRa.maxpower = 7;
//  myLoRa.outputpower = 15;
  myLoRa.PaDac = 0x84;      //0x84:max power = 17dBm   0x87:max power = 20dBm in PA_BOOST pin//-4~15
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <main+0x158>)
 8000db8:	2284      	movs	r2, #132	; 0x84
 8000dba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET);      //low frequency port switch, RESET for transmit, SET for receive
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4826      	ldr	r0, [pc, #152]	; (8000e60 <main+0x164>)
 8000dc6:	f000 fdf9 	bl	80019bc <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(FEM_CTX_GPIO_Port, FEM_CTX_Pin, GPIO_PIN_RESET);    //high frequency port switch
  myLoRa.PaOcp = 20;                     //output current protect, default=0x0B=11, max=27
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <main+0x158>)
 8000dcc:	2214      	movs	r2, #20
 8000dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  myLoRa.TCXOon = 0;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <main+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  myLoRa.packetSize = 68;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <main+0x158>)
 8000ddc:	2244      	movs	r2, #68	; 0x44
 8000dde:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  LoRa_init(&myLoRa);              //initialize LoRa configuration
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <main+0x158>)
 8000de4:	f7ff fcfe 	bl	80007e4 <LoRa_init>
  lastTic = 0;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <main+0x16c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  intervalTime = 1000;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <main+0x170>)
 8000df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df4:	801a      	strh	r2, [r3, #0]
  FlightModeON = 1;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <main+0x174>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
//	  HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);      //low frequency port switch, RESET for transmit, SET for receive
//      state = LoRa_transmit(&myLoRa, send_value, send_leng, TRANSMIT_TIMEOUT);

	  //LoRa_receive()
      uint8_t read_value[128];
      uint8_t read_leng = sizeof(read_value)/sizeof(read_value[0]);
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET);      //low frequency port switch, RESET for transmit, SET for receive
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <main+0x164>)
 8000e0a:	f000 fdd7 	bl	80019bc <HAL_GPIO_WritePin>
      check_ver = LoRa_receive(&myLoRa, read_value, read_leng);//return received size
 8000e0e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	480f      	ldr	r0, [pc, #60]	; (8000e54 <main+0x158>)
 8000e18:	f7ff fc1d 	bl	8000656 <LoRa_receive>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <main+0x178>)
 8000e22:	701a      	strb	r2, [r3, #0]
      for(int i =0;i<read_leng;i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e2a:	e00b      	b.n	8000e44 <main+0x148>
    	  check_ver2 = read_value[i];
 8000e2c:	463a      	mov	r2, r7
 8000e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e32:	4413      	add	r3, r2
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <main+0x17c>)
 8000e38:	701a      	strb	r2, [r3, #0]
      for(int i =0;i<read_leng;i++){
 8000e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e44:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbed      	blt.n	8000e2c <main+0x130>
  {
 8000e50:	e7d4      	b.n	8000dfc <main+0x100>
 8000e52:	bf00      	nop
 8000e54:	2000002c 	.word	0x2000002c
 8000e58:	20000070 	.word	0x20000070
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021400 	.word	0x40021400
 8000e68:	20000068 	.word	0x20000068
 8000e6c:	2000006c 	.word	0x2000006c
 8000e70:	2000006e 	.word	0x2000006e
 8000e74:	20000028 	.word	0x20000028
 8000e78:	20000029 	.word	0x20000029

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	; 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fd8e 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <SystemClock_Config+0xdc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec8:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <SystemClock_Config+0xe0>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ef4:	23b4      	movs	r3, #180	; 0xb4
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fde7 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f10:	f000 f830 	bl	8000f74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f14:	f000 fd90 	bl	8001a38 <HAL_PWREx_EnableOverDrive>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f1e:	f000 f829 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 f842 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 f813 	bl	8000f74 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_TIM_PeriodElapsedCallback>:
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
//	testvar=1;
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);



}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000f86:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <MX_SPI4_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f90:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_SPI4_Init+0x64>)
 8000fd2:	f001 f9e3 	bl	800239c <HAL_SPI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f7ff ffca 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000070 	.word	0x20000070
 8000fe8:	40013400 	.word	0x40013400

08000fec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_SPI_MspInit+0x94>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d133      	bne.n	8001076 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_SPI_MspInit+0x98>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <HAL_SPI_MspInit+0x98>)
 8001018:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_SPI_MspInit+0x98>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_SPI_MspInit+0x98>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_SPI_MspInit+0x98>)
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_SPI_MspInit+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <HAL_SPI_MspInit+0x9c>)
 8001062:	f000 faff 	bl	8001664 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2054      	movs	r0, #84	; 0x54
 800106c:	f000 faa1 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001070:	2054      	movs	r0, #84	; 0x54
 8001072:	f000 faba 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013400 	.word	0x40013400
 8001084:	40023800 	.word	0x40023800
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 f924 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f002 f854 	bl	80031e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000c8 	.word	0x200000c8

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001148:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800114c:	f000 fc50 	bl	80019f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8001150:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001154:	f000 fc4c 	bl	80019f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <SPI4_IRQHandler+0x10>)
 8001162:	f001 fd93 	bl	8002c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000070 	.word	0x20000070

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_TIM2_Init+0x98>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_TIM2_Init+0x98>)
 80011ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80011be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM2_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_TIM2_Init+0x98>)
 80011c8:	f242 3228 	movw	r2, #9000	; 0x2328
 80011cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_TIM2_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM2_Init+0x98>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_TIM2_Init+0x98>)
 80011dc:	f001 ffb2 	bl	8003144 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011e6:	f7ff fec5 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_TIM2_Init+0x98>)
 80011f8:	f002 f8fb 	bl	80033f2 <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001202:	f7ff feb7 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_TIM2_Init+0x98>)
 8001214:	f002 fb16 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800121e:	f7ff fea9 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000c8 	.word	0x200000c8

08001230 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001240:	d115      	bne.n	800126e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_TIM_Base_MspInit+0x48>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	201c      	movs	r0, #28
 8001264:	f000 f9a5 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001268:	201c      	movs	r0, #28
 800126a:	f000 f9be 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001298:	4c0b      	ldr	r4, [pc, #44]	; (80012c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a6:	f7ff ff63 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f002 fb5b 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fd25 	bl	8000cfc <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c0:	080039f4 	.word	0x080039f4
  ldr r2, =_sbss
 80012c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c8:	20000114 	.word	0x20000114

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f94f 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fec2 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f967 	bl	8001606 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f92f 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000110 	.word	0x20000110

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000110 	.word	0x20000110

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff3e 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff31 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d004      	beq.n	800163c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00c      	b.n	8001656 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2205      	movs	r2, #5
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e177      	b.n	8001970 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8166 	bne.w	800196a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80c0 	beq.w	800196a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b66      	ldr	r3, [pc, #408]	; (8001988 <HAL_GPIO_Init+0x324>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_GPIO_Init+0x324>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_GPIO_Init+0x324>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	4a61      	ldr	r2, [pc, #388]	; (800198c <HAL_GPIO_Init+0x328>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_GPIO_Init+0x32c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d037      	beq.n	80018a2 <HAL_GPIO_Init+0x23e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_GPIO_Init+0x330>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d031      	beq.n	800189e <HAL_GPIO_Init+0x23a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_GPIO_Init+0x334>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d02b      	beq.n	800189a <HAL_GPIO_Init+0x236>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_GPIO_Init+0x338>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x232>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <HAL_GPIO_Init+0x33c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x22e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a53      	ldr	r2, [pc, #332]	; (80019a4 <HAL_GPIO_Init+0x340>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x22a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_GPIO_Init+0x344>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x226>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_GPIO_Init+0x348>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x222>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x34c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x21e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_GPIO_Init+0x350>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x21a>
 800187a:	2309      	movs	r3, #9
 800187c:	e012      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 800187e:	230a      	movs	r3, #10
 8001880:	e010      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 8001882:	2308      	movs	r3, #8
 8001884:	e00e      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 8001886:	2307      	movs	r3, #7
 8001888:	e00c      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 800188a:	2306      	movs	r3, #6
 800188c:	e00a      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 800188e:	2305      	movs	r3, #5
 8001890:	e008      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 8001892:	2304      	movs	r3, #4
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 8001896:	2303      	movs	r3, #3
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x240>
 80018a2:	2300      	movs	r3, #0
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b4:	4935      	ldr	r1, [pc, #212]	; (800198c <HAL_GPIO_Init+0x328>)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x354>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_GPIO_Init+0x354>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_GPIO_Init+0x354>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_GPIO_Init+0x354>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_GPIO_Init+0x354>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_GPIO_Init+0x354>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_GPIO_Init+0x354>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_GPIO_Init+0x354>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	f67f ae84 	bls.w	8001680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40013800 	.word	0x40013800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40020800 	.word	0x40020800
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40021400 	.word	0x40021400
 80019a8:	40021800 	.word	0x40021800
 80019ac:	40021c00 	.word	0x40021c00
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40022400 	.word	0x40022400
 80019b8:	40013c00 	.word	0x40013c00

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d8:	e003      	b.n	80019e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	041a      	lsls	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f806 	bl	8001a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_PWREx_EnableOverDrive+0x94>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7ff fc9a 	bl	800139c <HAL_GetTick>
 8001a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a6a:	e009      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc96 	bl	800139c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7a:	d901      	bls.n	8001a80 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e01f      	b.n	8001ac0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff fc82 	bl	800139c <HAL_GetTick>
 8001a98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a9a:	e009      	b.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc7e 	bl	800139c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aaa:	d901      	bls.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e007      	b.n	8001ac0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001abc:	d1ee      	bne.n	8001a9c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	420e0040 	.word	0x420e0040
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	420e0044 	.word	0x420e0044

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e267      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d075      	beq.n	8001be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d00c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b82      	ldr	r3, [pc, #520]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	4b7e      	ldr	r3, [pc, #504]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x108>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d157      	bne.n	8001be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e242      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_OscConfig+0x74>
 8001b3e:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6f      	ldr	r2, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fc04 	bl	800139c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fc00 	bl	800139c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e207      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fbf0 	bl	800139c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fbec 	bl	800139c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1f3      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b51      	ldr	r3, [pc, #324]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xe8>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bee:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c7      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fba5 	bl	800139c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fba1 	bl	800139c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a8      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4925      	ldr	r1, [pc, #148]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb84 	bl	800139c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb80 	bl	800139c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e187      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d036      	beq.n	8001d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d016      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fb64 	bl	800139c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fb60 	bl	800139c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e167      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x200>
 8001cf6:	e01b      	b.n	8001d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb4d 	bl	800139c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	e00e      	b.n	8001d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb49 	bl	800139c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d907      	bls.n	8001d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e150      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	42470000 	.word	0x42470000
 8001d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ea      	bne.n	8001d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8097 	beq.w	8001e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b81      	ldr	r3, [pc, #516]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b77      	ldr	r3, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b74      	ldr	r3, [pc, #464]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a73      	ldr	r2, [pc, #460]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb09 	bl	800139c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff fb05 	bl	800139c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e10c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2ea>
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a63      	ldr	r2, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x30c>
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a5b      	ldr	r2, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001de4:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d015      	beq.n	8001e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff faca 	bl	800139c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fac6 	bl	800139c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0cb      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0ee      	beq.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fab4 	bl	800139c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7ff fab0 	bl	800139c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0b5      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ee      	bne.n	8001e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a1 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d05c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d141      	bne.n	8001f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa84 	bl	800139c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fa80 	bl	800139c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e087      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	019b      	lsls	r3, r3, #6
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fa59 	bl	800139c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff fa55 	bl	800139c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e05c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x416>
 8001f0c:	e054      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fa42 	bl	800139c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fa3e 	bl	800139c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
 8001f3a:	e03d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e038      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4ec>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d121      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d111      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cc      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d90c      	bls.n	8002004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d044      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d119      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d003      	beq.n	8002086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e067      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4934      	ldr	r1, [pc, #208]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7ff f970 	bl	800139c <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7ff f96c 	bl	800139c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d20c      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f8d0 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	080039d4 	.word	0x080039d4
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b094      	sub	sp, #80	; 0x50
 800219a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	647b      	str	r3, [r7, #68]	; 0x44
 80021a0:	2300      	movs	r3, #0
 80021a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021a4:	2300      	movs	r3, #0
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ac:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d00d      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	f200 80e1 	bhi.w	8002380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x34>
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x3a>
 80021c6:	e0db      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021cc:	e0db      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_GetSysClockFreq+0x204>)
 80021d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021d2:	e0d8      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
 8002202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4621      	mov	r1, r4
 8002220:	1a51      	subs	r1, r2, r1
 8002222:	6139      	str	r1, [r7, #16]
 8002224:	4629      	mov	r1, r5
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002238:	4659      	mov	r1, fp
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	4651      	mov	r1, sl
 800223e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002242:	4651      	mov	r1, sl
 8002244:	018a      	lsls	r2, r1, #6
 8002246:	4651      	mov	r1, sl
 8002248:	ebb2 0801 	subs.w	r8, r2, r1
 800224c:	4659      	mov	r1, fp
 800224e:	eb63 0901 	sbc.w	r9, r3, r1
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800225e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002266:	4690      	mov	r8, r2
 8002268:	4699      	mov	r9, r3
 800226a:	4623      	mov	r3, r4
 800226c:	eb18 0303 	adds.w	r3, r8, r3
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	462b      	mov	r3, r5
 8002274:	eb49 0303 	adc.w	r3, r9, r3
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002286:	4629      	mov	r1, r5
 8002288:	028b      	lsls	r3, r1, #10
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002290:	4621      	mov	r1, r4
 8002292:	028a      	lsls	r2, r1, #10
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229a:	2200      	movs	r2, #0
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
 800229e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a4:	f7fd ffa2 	bl	80001ec <__aeabi_uldivmod>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4613      	mov	r3, r2
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b0:	e058      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	2200      	movs	r2, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	4611      	mov	r1, r2
 80022be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	f04f 0000 	mov.w	r0, #0
 80022d4:	f04f 0100 	mov.w	r1, #0
 80022d8:	0159      	lsls	r1, r3, #5
 80022da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022de:	0150      	lsls	r0, r2, #5
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4641      	mov	r1, r8
 80022e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002304:	ebb2 040a 	subs.w	r4, r2, sl
 8002308:	eb63 050b 	sbc.w	r5, r3, fp
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	464b      	mov	r3, r9
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234e:	2200      	movs	r2, #0
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	61fa      	str	r2, [r7, #28]
 8002354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002358:	f7fd ff48 	bl	80001ec <__aeabi_uldivmod>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4613      	mov	r3, r2
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	3301      	adds	r3, #1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetSysClockFreq+0x204>)
 8002382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002388:	4618      	mov	r0, r3
 800238a:	3750      	adds	r7, #80	; 0x50
 800238c:	46bd      	mov	sp, r7
 800238e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	00f42400 	.word	0x00f42400

0800239c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07b      	b.n	80024a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023be:	d009      	beq.n	80023d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
 80023c6:	e005      	b.n	80023d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fdfc 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	ea42 0103 	orr.w	r1, r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0104 	and.w	r1, r3, #4
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f003 0210 	and.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b088      	sub	sp, #32
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_SPI_Transmit+0x22>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e126      	b.n	800271e <HAL_SPI_Transmit+0x270>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d8:	f7fe ff60 	bl	800139c <HAL_GetTick>
 80024dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f2:	e10b      	b.n	800270c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_SPI_Transmit+0x52>
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002504:	e102      	b.n	800270c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2203      	movs	r2, #3
 800250a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d10f      	bne.n	800256e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d007      	beq.n	800258c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002594:	d14b      	bne.n	800262e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_SPI_Transmit+0xf6>
 800259e:	8afb      	ldrh	r3, [r7, #22]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d13e      	bne.n	8002622 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c8:	e02b      	b.n	8002622 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d112      	bne.n	80025fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80025fc:	e011      	b.n	8002622 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fe:	f7fe fecd 	bl	800139c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d803      	bhi.n	8002616 <HAL_SPI_Transmit+0x168>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d102      	bne.n	800261c <HAL_SPI_Transmit+0x16e>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002620:	e074      	b.n	800270c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ce      	bne.n	80025ca <HAL_SPI_Transmit+0x11c>
 800262c:	e04c      	b.n	80026c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Transmit+0x18e>
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d140      	bne.n	80026be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002662:	e02c      	b.n	80026be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d113      	bne.n	800269a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	86da      	strh	r2, [r3, #54]	; 0x36
 8002698:	e011      	b.n	80026be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269a:	f7fe fe7f 	bl	800139c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d803      	bhi.n	80026b2 <HAL_SPI_Transmit+0x204>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d102      	bne.n	80026b8 <HAL_SPI_Transmit+0x20a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026bc:	e026      	b.n	800270c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1cd      	bne.n	8002664 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fcf7 	bl	80030c0 <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e000      	b.n	800270c <HAL_SPI_Transmit+0x25e>
  }

error:
 800270a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800271c:	7ffb      	ldrb	r3, [r7, #31]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d112      	bne.n	800276a <HAL_SPI_Receive+0x44>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2204      	movs	r2, #4
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8f1 	bl	8002948 <HAL_SPI_TransmitReceive>
 8002766:	4603      	mov	r3, r0
 8002768:	e0ea      	b.n	8002940 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_SPI_Receive+0x52>
 8002774:	2302      	movs	r3, #2
 8002776:	e0e3      	b.n	8002940 <HAL_SPI_Receive+0x21a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002780:	f7fe fe0c 	bl	800139c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002796:	e0ca      	b.n	800292e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Receive+0x7e>
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027a8:	e0c1      	b.n	800292e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2204      	movs	r2, #4
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f0:	d10f      	bne.n	8002812 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d007      	beq.n	8002830 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d162      	bne.n	80028fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002838:	e02e      	b.n	8002898 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d115      	bne.n	8002874 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f103 020c 	add.w	r2, r3, #12
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002872:	e011      	b.n	8002898 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002874:	f7fe fd92 	bl	800139c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d803      	bhi.n	800288c <HAL_SPI_Receive+0x166>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Receive+0x16c>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002896:	e04a      	b.n	800292e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1cb      	bne.n	800283a <HAL_SPI_Receive+0x114>
 80028a2:	e031      	b.n	8002908 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d113      	bne.n	80028da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	b292      	uxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028d8:	e011      	b.n	80028fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028da:	f7fe fd5f 	bl	800139c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d803      	bhi.n	80028f2 <HAL_SPI_Receive+0x1cc>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d102      	bne.n	80028f8 <HAL_SPI_Receive+0x1d2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028fc:	e017      	b.n	800292e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1cd      	bne.n	80028a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb71 	bl	8002ff4 <SPI_EndRxTransaction>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
 800292a:	e000      	b.n	800292e <HAL_SPI_Receive+0x208>
  }

error :
 800292c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800293e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_SPI_TransmitReceive+0x26>
 800296a:	2302      	movs	r3, #2
 800296c:	e18a      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x33c>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002976:	f7fe fd11 	bl	800139c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002994:	2b01      	cmp	r3, #1
 8002996:	d00f      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x70>
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299e:	d107      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x68>
 80029a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d003      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
 80029b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029b6:	e15b      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x82>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x82>
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029d0:	e14e      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d003      	beq.n	80029e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	887a      	ldrh	r2, [r7, #2]
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d007      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a42:	d178      	bne.n	8002b36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x10a>
 8002a4c:	8b7b      	ldrh	r3, [r7, #26]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d166      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	1c9a      	adds	r2, r3, #2
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a76:	e053      	b.n	8002b20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d11b      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x176>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d016      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x176>
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d113      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	1c9a      	adds	r2, r3, #2
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x1b8>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002afc:	2301      	movs	r3, #1
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b00:	f7fe fc4c 	bl	800139c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d807      	bhi.n	8002b20 <HAL_SPI_TransmitReceive+0x1d8>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d003      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b1e:	e0a7      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1a6      	bne.n	8002a78 <HAL_SPI_TransmitReceive+0x130>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1a1      	bne.n	8002a78 <HAL_SPI_TransmitReceive+0x130>
 8002b34:	e07c      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x1fc>
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d16b      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6a:	e057      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d11c      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x26c>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d017      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x26c>
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d114      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d119      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x2ae>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d014      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bf6:	f7fe fbd1 	bl	800139c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d803      	bhi.n	8002c0e <HAL_SPI_TransmitReceive+0x2c6>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d102      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x2cc>
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c1a:	e029      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1a2      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x224>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d19d      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa43 	bl	80030c0 <SPI_EndRxTxTransaction>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c4c:	e010      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	e000      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3730      	adds	r7, #48	; 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    return;
 8002cce:	e0d7      	b.n	8002e80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0x66>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	09db      	lsrs	r3, r3, #7
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
    return;
 8002cf0:	e0c6      	b.n	8002e80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_SPI_IRQHandler+0x8c>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b4 	beq.w	8002e80 <HAL_SPI_IRQHandler+0x1f4>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ad 	beq.w	8002e80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d023      	beq.n	8002d7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d011      	beq.n	8002d62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	e00b      	b.n	8002d7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
        return;
 8002d78:	e082      	b.n	8002e80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00c      	beq.n	8002dd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f043 0208 	orr.w	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04f      	beq.n	8002e7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_SPI_IRQHandler+0x17e>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d034      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0203 	bic.w	r2, r2, #3
 8002e18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d011      	beq.n	8002e46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_SPI_IRQHandler+0x1fc>)
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fbf5 	bl	800161e <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_SPI_IRQHandler+0x1fc>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fbdf 	bl	800161e <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002e72:	e003      	b.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f809 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e7a:	e000      	b.n	8002e7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002e7c:	bf00      	nop
    return;
 8002e7e:	bf00      	nop
  }
}
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	08002ebd 	.word	0x08002ebd

08002e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eae:	b2db      	uxtb	r3, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff ffd8 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ef4:	f7fe fa52 	bl	800139c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f04:	f7fe fa4a 	bl	800139c <HAL_GetTick>
 8002f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	0d1b      	lsrs	r3, r3, #20
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f1a:	e054      	b.n	8002fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d050      	beq.n	8002fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f24:	f7fe fa3a 	bl	800139c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d902      	bls.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d13d      	bne.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f52:	d111      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	d004      	beq.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d107      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f80:	d10f      	bne.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e017      	b.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d19b      	bne.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003008:	d111      	bne.n	800302e <SPI_EndRxTransaction+0x3a>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d004      	beq.n	800301e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d107      	bne.n	800302e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003036:	d12a      	bne.n	800308e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003040:	d012      	beq.n	8003068 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff49 	bl	8002ee4 <SPI_WaitFlagStateUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02d      	beq.n	80030b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e026      	b.n	80030b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	2101      	movs	r1, #1
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff36 	bl	8002ee4 <SPI_WaitFlagStateUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01a      	beq.n	80030b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e013      	b.n	80030b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	2101      	movs	r1, #1
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff23 	bl	8002ee4 <SPI_WaitFlagStateUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e000      	b.n	80030b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <SPI_EndRxTxTransaction+0x7c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <SPI_EndRxTxTransaction+0x80>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0d5b      	lsrs	r3, r3, #21
 80030d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ea:	d112      	bne.n	8003112 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fef4 	bl	8002ee4 <SPI_WaitFlagStateUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e00f      	b.n	8003132 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3b01      	subs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d0f2      	beq.n	8003112 <SPI_EndRxTxTransaction+0x52>
 800312c:	e000      	b.n	8003130 <SPI_EndRxTxTransaction+0x70>
        break;
 800312e:	bf00      	nop
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000000 	.word	0x20000000
 8003140:	165e9f81 	.word	0x165e9f81

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e041      	b.n	80031da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe f860 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 fa24 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d122      	bne.n	800323e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11b      	bne.n	800323e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0202 	mvn.w	r2, #2
 800320e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9b5 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 800322a:	e005      	b.n	8003238 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f9a7 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9b8 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d122      	bne.n	8003292 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d11b      	bne.n	8003292 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0204 	mvn.w	r2, #4
 8003262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f98b 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 800327e:	e005      	b.n	800328c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f97d 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f98e 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d122      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0208 	mvn.w	r2, #8
 80032b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f961 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 80032d2:	e005      	b.n	80032e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f953 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f964 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d122      	bne.n	800333a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d11b      	bne.n	800333a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0210 	mvn.w	r2, #16
 800330a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2208      	movs	r2, #8
 8003310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f937 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f929 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f93a 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10e      	bne.n	8003366 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0201 	mvn.w	r2, #1
 800335e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd fdfd 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d10e      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d107      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800338a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fadf 	bl	8003950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d10e      	bne.n	80033be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8ff 	bl	80035bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d10e      	bne.n	80033ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0220 	mvn.w	r2, #32
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 faa9 	bl	800393c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_ConfigClockSource+0x1c>
 800340a:	2302      	movs	r3, #2
 800340c:	e0b4      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x186>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003434:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	d03e      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0xd4>
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344c:	f200 8087 	bhi.w	800355e <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003454:	f000 8086 	beq.w	8003564 <HAL_TIM_ConfigClockSource+0x172>
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d87f      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 800345e:	2b70      	cmp	r3, #112	; 0x70
 8003460:	d01a      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0xa6>
 8003462:	2b70      	cmp	r3, #112	; 0x70
 8003464:	d87b      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 8003466:	2b60      	cmp	r3, #96	; 0x60
 8003468:	d050      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x11a>
 800346a:	2b60      	cmp	r3, #96	; 0x60
 800346c:	d877      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	2b50      	cmp	r3, #80	; 0x50
 8003470:	d03c      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xfa>
 8003472:	2b50      	cmp	r3, #80	; 0x50
 8003474:	d873      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d058      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x13a>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d86f      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 800347e:	2b30      	cmp	r3, #48	; 0x30
 8003480:	d064      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x15a>
 8003482:	2b30      	cmp	r3, #48	; 0x30
 8003484:	d86b      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 8003486:	2b20      	cmp	r3, #32
 8003488:	d060      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x15a>
 800348a:	2b20      	cmp	r3, #32
 800348c:	d867      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d05c      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x15a>
 8003492:	2b10      	cmp	r3, #16
 8003494:	d05a      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x15a>
 8003496:	e062      	b.n	800355e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f000 f9ac 	bl	8003804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
      break;
 80034c4:	e04f      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f000 f995 	bl	8003804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e03c      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f000 f909 	bl	8003710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2150      	movs	r1, #80	; 0x50
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f962 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 800350a:	e02c      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	f000 f928 	bl	800376e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2160      	movs	r1, #96	; 0x60
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f952 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 800352a:	e01c      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	f000 f8e9 	bl	8003710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f942 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 800354a:	e00c      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 f939 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 800355c:	e003      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      break;
 8003562:	e000      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003564:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <TIM_Base_SetConfig+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d00f      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3d      	ldr	r2, [pc, #244]	; (80036e8 <TIM_Base_SetConfig+0x118>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00b      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <TIM_Base_SetConfig+0x11c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <TIM_Base_SetConfig+0x120>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <TIM_Base_SetConfig+0x124>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d108      	bne.n	8003622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <TIM_Base_SetConfig+0x114>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d027      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <TIM_Base_SetConfig+0x118>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d023      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <TIM_Base_SetConfig+0x11c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <TIM_Base_SetConfig+0x120>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <TIM_Base_SetConfig+0x124>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <TIM_Base_SetConfig+0x128>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <TIM_Base_SetConfig+0x12c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <TIM_Base_SetConfig+0x130>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a25      	ldr	r2, [pc, #148]	; (8003704 <TIM_Base_SetConfig+0x134>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a24      	ldr	r2, [pc, #144]	; (8003708 <TIM_Base_SetConfig+0x138>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a23      	ldr	r2, [pc, #140]	; (800370c <TIM_Base_SetConfig+0x13c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <TIM_Base_SetConfig+0x114>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0xf8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <TIM_Base_SetConfig+0x124>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800
 8003704:	40001800 	.word	0x40001800
 8003708:	40001c00 	.word	0x40001c00
 800370c:	40002000 	.word	0x40002000

08003710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 030a 	bic.w	r3, r3, #10
 800374c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0210 	bic.w	r2, r3, #16
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	031b      	lsls	r3, r3, #12
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f043 0307 	orr.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	431a      	orrs	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e05a      	b.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d01d      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10c      	bne.n	8003900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40001800 	.word	0x40001800

0800393c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4d0d      	ldr	r5, [pc, #52]	; (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396a:	1b64      	subs	r4, r4, r5
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2600      	movs	r6, #0
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4d0b      	ldr	r5, [pc, #44]	; (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	; (80039a8 <__libc_init_array+0x44>)
 8003978:	f000 f820 	bl	80039bc <_init>
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2600      	movs	r6, #0
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f855 3b04 	ldr.w	r3, [r5], #4
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	080039ec 	.word	0x080039ec
 80039a0:	080039ec 	.word	0x080039ec
 80039a4:	080039ec 	.word	0x080039ec
 80039a8:	080039f0 	.word	0x080039f0

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
